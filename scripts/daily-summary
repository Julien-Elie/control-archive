#!/usr/bin/perl -w
$ID = q$Id$;
#
# daily-summary -- Send a daily summary of control activity.
#
# Copyright 2003 Russ Allbery <rra@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

##############################################################################
# Site configuration
##############################################################################

# Default address to send mail to.
$ADDRESS = 'usenet-config@isc.org';

# Directory in which to find log files that record the actions taken.
$LOGBASE = '/work/usenet/config';

# The address from which the reports are mailed.
$SENDER = 'rra@stanford.edu';

##############################################################################
# Modules and declarations
##############################################################################

require 5.005;

use strict;
use vars qw($ADDRESS $ID $LOGBASE $SENDER);

use Date::Parse qw(str2time);
use Getopt::Long qw(GetOptions);
use POSIX qw(strftime);

##############################################################################
# Implementation
##############################################################################

# Trim extraneous garbage from the path.
my $fullpath = $0;
$0 =~ s%.*/%%;

# Parse command-line options.
my ($address, $help, $mail, $version);
Getopt::Long::Configure ('bundling');
GetOptions ('address|a=s' => \$address,
            'help|h'      => \$help,
            'mail|m'      => \$mail,
            'version|v'   => \$version) or exit 1;
if ($help) {
    print "Feeding myself to perldoc, please wait....\n";
    exec ('perldoc', '-t', $fullpath);
} elsif ($version) {
    my $version = join (' ', (split (' ', $ID))[1..3]);
    $version =~ s/,v\b//;
    $version =~ s/(\S+)$/($1)/;
    die $version, "\n";
}
$address ||= $ADDRESS;
my $time = time - 60 * 60 * 24;
if ($ARGV[0]) {
    $time = str2time ($ARGV[0])
        or die "$0: cannot parse $ARGV[0] as a date\n";
}

# First, figure out what day we're generating logs for.  Take the date from
# the command line, if given, and otherwise assume yesterday.  Generate a
# pattern to use to search the logs by date.
my @time = gmtime ($time);
my $day = strftime ('%Y-%m-%d', @time);
my $pattern = qr/^\Q$day\E \S+ \S+ ACTION: /o;

# Now, find the log file.
my $month = strftime ('%Y-%m', @time);
open (LOG, "$LOGBASE/log.$month")
    or die "$0: cannot open $LOGBASE/log.$month: $!\n";

# Search through it for appropriate entries.
my @actions;
while (<LOG>) {
    next unless /$pattern/;
    s/^(\S+ \S+) \[\d+\]/$1/;
    push (@actions, $_);
}

# If there's anything left, send the summary mail to usenet-config.
if (@actions) {
    if ($mail) {
        open (MAIL, '| /usr/lib/sendmail -f $SENDER -t -oi -oem')
            or die "$0: cannot open a pipe to sendmail: $!\n";
    } else {
        open (MAIL, '>&STDOUT') or die "$0: cannot dup stdout: $!\n";
    }
    print MAIL "From: Automated Log Scan <$SENDER>\n";
    print MAIL "To: $address\n";
    print MAIL "Subject: Newsgroup changes for $day\n";
    print MAIL "\n";
    print MAIL for @actions;
    close MAIL;
    die "$0: sendmail exited with status ", ($? >> 8), "\n" if ($? != 0);
}

##############################################################################
# Documentation
##############################################################################

=head1 NAME

daily-summary - Send a daily summary of control activity

=head1 SYNOPSIS

daily-summary [B<-hmv>] [B<-a> I<address>]

=head1 DESCRIPTION

B<daily-summary> either prints out or mails a summary of one day's worth of
activity in an active newsgroup database maintained by B<process-control>
and B<update-control>, taken from their log files.  Note that all log file
times, and therefore all day boundaries, are in UTC, not in the local time
zone.

=head1 OPTIONS

=over 4

=item B<-a> I<address>, B<--address>=I<address>

Send the message to I<address> rather than the default of
usenet-config@isc.org.  If you are using this program for your own purposes,
please either use this option or change the default address at the top of
this script.

=item B<-h>, B<--help>

Print out this documentation (which is done simply by feeding the script to
C<perldoc -t>).

=item B<-m>, B<--mail>

Send the output in mail rather than just printing it to standard output.  By
default this sends to usenet-config@isc.org, but see the B<-a> option.

=item B<-v>, B<--version>

Print out the version of B<daily-summary> and exit.

=back

=head1 SEE ALSO

process-control(1), update-control(1)

=head1 AUTHOR

Russ Allbery <rra@stanford.edu>

=head1 COPYRIGHT AND LICENSE

Copyright 2003 by Russ Allbery <rra@stanford.edu>

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut
